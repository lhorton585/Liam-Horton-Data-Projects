{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "TJhc2ggi8W88"
      },
      "outputs": [],
      "source": [
        "import pandas as pd \n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "import nltk"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df = pd.read_csv('Mustang Harrys Reviews.csv')"
      ],
      "metadata": {
        "id": "PLxX0xHh-tHw"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "_NCWkjBg-1oY",
        "outputId": "7a1f0ccb-5c89-4761-d32c-ee7c85213ebd"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0 review_date   user_name  rating  \\\n",
              "0           0  12/30/2022   Alison H.       5   \n",
              "1           1  11/16/2022  Lindsey A.       4   \n",
              "\n",
              "                                         review_text  \n",
              "0  [\"Didn't k ow what to expect but glad we stopp...  \n",
              "1  [\"My friend and I had dinner here before seein...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66939e16-3008-4b36-bbe5-bd33f58e3d1e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>review_date</th>\n",
              "      <th>user_name</th>\n",
              "      <th>rating</th>\n",
              "      <th>review_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>12/30/2022</td>\n",
              "      <td>Alison H.</td>\n",
              "      <td>5</td>\n",
              "      <td>[\"Didn't k ow what to expect but glad we stopp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>11/16/2022</td>\n",
              "      <td>Lindsey A.</td>\n",
              "      <td>4</td>\n",
              "      <td>[\"My friend and I had dinner here before seein...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66939e16-3008-4b36-bbe5-bd33f58e3d1e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-66939e16-3008-4b36-bbe5-bd33f58e3d1e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-66939e16-3008-4b36-bbe5-bd33f58e3d1e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.drop(['Unnamed: 0', 'review_date', 'user_name'], axis =1, inplace = True)"
      ],
      "metadata": {
        "id": "p7aQRMe1_DNF"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4C_QSsli_Z2j",
        "outputId": "1d136d93-ca11-4eb8-f13e-7f1d8b1caec9"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 421 entries, 0 to 420\n",
            "Data columns (total 2 columns):\n",
            " #   Column       Non-Null Count  Dtype \n",
            "---  ------       --------------  ----- \n",
            " 0   rating       421 non-null    int64 \n",
            " 1   review_text  421 non-null    object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 6.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scores = [1,2,3,4,5]\n",
        "sentiment = [1, 1, 1, 0, 0]\n",
        "\n",
        "reviews_df['review_sentiment'] = reviews_df['rating'].replace(scores, sentiment)"
      ],
      "metadata": {
        "id": "SiLc4mAo_5ll"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Recode makes negative reviews the class of interest, more sutied to potential business case "
      ],
      "metadata": {
        "id": "6ppUCxWB6QzP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "RCjgd2T8AHee",
        "outputId": "9398c354-7dd9-4cf3-adb1-8740563e8528"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rating                                        review_text  review_sentiment\n",
              "0       5  [\"Didn't k ow what to expect but glad we stopp...                 0\n",
              "1       4  [\"My friend and I had dinner here before seein...                 0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-97510ce5-7f3d-47f9-8141-66f00dec9a0d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>review_text</th>\n",
              "      <th>review_sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>[\"Didn't k ow what to expect but glad we stopp...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>[\"My friend and I had dinner here before seein...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97510ce5-7f3d-47f9-8141-66f00dec9a0d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-97510ce5-7f3d-47f9-8141-66f00dec9a0d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-97510ce5-7f3d-47f9-8141-66f00dec9a0d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import string\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "import nltk\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "nltk.download('wordnet')\n",
        "nltk.download(\"omw-1.4\")\n",
        "def preprocess(t):\n",
        "    clean_t = [char for char in t if char not in string.punctuation]\n",
        "    clean_t = ''.join(clean_t)\n",
        "    clean_t = [word for word in clean_t.split(' ') if word not in stopwords.words('english')]\n",
        "    lemmitizer = WordNetLemmatizer()\n",
        "    clean_t = [lemmitizer.lemmatize(word) for word in clean_t]\n",
        "    clean_t = ' '.join(clean_t)\n",
        "    clean_t = clean_t.lower()\n",
        "    return clean_t\n",
        "reviews_df['processed_review_text'] = reviews_df['review_text'].apply(preprocess)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_cqsmukAMD8",
        "outputId": "2e87a39c-6936-46be-e7b4-ac94da736f1e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "h56hfZAnBJ-I",
        "outputId": "fe928ca0-61a1-4aed-b273-79eca0e81a4e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rating                                        review_text  \\\n",
              "0       5  [\"Didn't k ow what to expect but glad we stopp...   \n",
              "1       4  [\"My friend and I had dinner here before seein...   \n",
              "\n",
              "   review_sentiment                              processed_review_text  \n",
              "0                 0  didnt k ow expect glad stopped it happy hour g...  \n",
              "1                 0  my friend i dinner seeing concert msg we came ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49987e23-e90b-4ab4-8d79-5f55937ac1b0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rating</th>\n",
              "      <th>review_text</th>\n",
              "      <th>review_sentiment</th>\n",
              "      <th>processed_review_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>[\"Didn't k ow what to expect but glad we stopp...</td>\n",
              "      <td>0</td>\n",
              "      <td>didnt k ow expect glad stopped it happy hour g...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>[\"My friend and I had dinner here before seein...</td>\n",
              "      <td>0</td>\n",
              "      <td>my friend i dinner seeing concert msg we came ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49987e23-e90b-4ab4-8d79-5f55937ac1b0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-49987e23-e90b-4ab4-8d79-5f55937ac1b0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-49987e23-e90b-4ab4-8d79-5f55937ac1b0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = reviews_df['processed_review_text']\n",
        "y = reviews_df['review_sentiment']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)"
      ],
      "metadata": {
        "id": "271YXXzqB7Al"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, recall_score, precision_score, f1_score, roc_curve, auc, precision_recall_curve"
      ],
      "metadata": {
        "id": "JOcbKrUXC_1v"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Count Vectorizer "
      ],
      "metadata": {
        "id": "w8O1aEC0HnV_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_names = [\"Logistic Regression\", \"SVM\", \"Decision Tree\", \"Random Forest\", \n",
        "               \"AdaBoost\", \"Neural Net\", \"Naive Bayes\"]\n",
        "classifiers = [LogisticRegression(),\n",
        "               SVC(probability=True),\n",
        "               DecisionTreeClassifier(max_depth=5),\n",
        "               RandomForestClassifier(max_depth=5, n_estimators=10),\n",
        "               AdaBoostClassifier(),\n",
        "               MLPClassifier(alpha=1, max_iter=1000),\n",
        "               MultinomialNB()\n",
        "               ]\n",
        "for model_name, clf in zip(model_names, classifiers):\n",
        "  clf_pipe = Pipeline([\n",
        "                    ('count vec', CountVectorizer()),\n",
        "                    (model_name, clf),\n",
        "                    ])               \n",
        "  clf_pipe.fit(X_train,y_train)\n",
        "\n",
        "  y_pred = clf_pipe.predict(X_test)\n",
        "  y_pred_prob = clf_pipe.predict_proba(X_test)[:, 1]\n",
        "\n",
        "  fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n",
        "  precision, recall, thresholds_pr = precision_recall_curve(y_test, y_pred_prob)\n",
        "\n",
        "  print('\\n\\n', model_name, '\\n\\n')\n",
        "  print(classification_report(y_test, y_pred))\n",
        "  print('ROC AUC: ', auc(fpr, tpr))\n",
        "  print('Precision/Recall AUC: ', auc(recall, precision))\n",
        "  print('\\n\\n') "
      ],
      "metadata": {
        "id": "IgCCQRQwDGLj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f3b20af-566f-4001-a731-9ed6f99e8fca"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            " Logistic Regression \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.87      0.84        70\n",
            "           1       0.82      0.74      0.78        57\n",
            "\n",
            "    accuracy                           0.81       127\n",
            "   macro avg       0.81      0.80      0.81       127\n",
            "weighted avg       0.81      0.81      0.81       127\n",
            "\n",
            "ROC AUC:  0.8573934837092733\n",
            "Precision/Recall AUC:  0.8335294999330767\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " SVM \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.71      0.86      0.78        70\n",
            "           1       0.77      0.58      0.66        57\n",
            "\n",
            "    accuracy                           0.73       127\n",
            "   macro avg       0.74      0.72      0.72       127\n",
            "weighted avg       0.74      0.73      0.73       127\n",
            "\n",
            "ROC AUC:  0.8278195488721805\n",
            "Precision/Recall AUC:  0.7901333333595746\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Decision Tree \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.74      0.81        70\n",
            "           1       0.74      0.89      0.81        57\n",
            "\n",
            "    accuracy                           0.81       127\n",
            "   macro avg       0.82      0.82      0.81       127\n",
            "weighted avg       0.83      0.81      0.81       127\n",
            "\n",
            "ROC AUC:  0.7994987468671679\n",
            "Precision/Recall AUC:  0.5936651717341339\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Random Forest \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.87      0.73        70\n",
            "           1       0.69      0.35      0.47        57\n",
            "\n",
            "    accuracy                           0.64       127\n",
            "   macro avg       0.66      0.61      0.60       127\n",
            "weighted avg       0.65      0.64      0.61       127\n",
            "\n",
            "ROC AUC:  0.7839598997493734\n",
            "Precision/Recall AUC:  0.6583793652069689\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " AdaBoost \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.72      0.76      0.74        70\n",
            "           1       0.68      0.63      0.65        57\n",
            "\n",
            "    accuracy                           0.70       127\n",
            "   macro avg       0.70      0.69      0.70       127\n",
            "weighted avg       0.70      0.70      0.70       127\n",
            "\n",
            "ROC AUC:  0.7617794486215539\n",
            "Precision/Recall AUC:  0.6748383304816872\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Neural Net \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.87      0.83        70\n",
            "           1       0.82      0.72      0.77        57\n",
            "\n",
            "    accuracy                           0.80       127\n",
            "   macro avg       0.81      0.80      0.80       127\n",
            "weighted avg       0.80      0.80      0.80       127\n",
            "\n",
            "ROC AUC:  0.8526315789473684\n",
            "Precision/Recall AUC:  0.8258310165461973\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Naive Bayes \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.74      0.87      0.80        70\n",
            "           1       0.80      0.63      0.71        57\n",
            "\n",
            "    accuracy                           0.76       127\n",
            "   macro avg       0.77      0.75      0.75       127\n",
            "weighted avg       0.77      0.76      0.76       127\n",
            "\n",
            "ROC AUC:  0.8719298245614034\n",
            "Precision/Recall AUC:  0.8093439269759412\n",
            "\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TFIDF Vectorizer"
      ],
      "metadata": {
        "id": "g0afO1QJH4W9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for model_name, clf in zip(model_names, classifiers):\n",
        "  clf_pipe = Pipeline([\n",
        "                    ('tfidf', TfidfVectorizer()),\n",
        "                    (model_name, clf),\n",
        "                    ])               \n",
        "  clf_pipe.fit(X_train,y_train)\n",
        "\n",
        "  y_pred = clf_pipe.predict(X_test)\n",
        "  y_pred_prob = clf_pipe.predict_proba(X_test)[:, 1]\n",
        "\n",
        "  fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n",
        "  precision, recall, thresholds_pr = precision_recall_curve(y_test, y_pred_prob)\n",
        "\n",
        "  print('\\n\\n', model_name, '\\n\\n')\n",
        "  print(classification_report(y_test, y_pred))\n",
        "  print('ROC AUC: ', auc(fpr, tpr))\n",
        "  print('Precision/Recall AUC: ', auc(recall, precision))\n",
        "  print('\\n\\n') "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "REzhSt5kFKgH",
        "outputId": "3bdaf49b-d4ec-4bfc-a10a-c8505f8e0185"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            " Logistic Regression \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.71      0.91      0.80        70\n",
            "           1       0.84      0.54      0.66        57\n",
            "\n",
            "    accuracy                           0.75       127\n",
            "   macro avg       0.77      0.73      0.73       127\n",
            "weighted avg       0.77      0.75      0.74       127\n",
            "\n",
            "ROC AUC:  0.8909774436090225\n",
            "Precision/Recall AUC:  0.8583676816802484\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " SVM \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.71      0.91      0.80        70\n",
            "           1       0.84      0.54      0.66        57\n",
            "\n",
            "    accuracy                           0.75       127\n",
            "   macro avg       0.77      0.73      0.73       127\n",
            "weighted avg       0.77      0.75      0.74       127\n",
            "\n",
            "ROC AUC:  0.8914786967418546\n",
            "Precision/Recall AUC:  0.8575253445789672\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Decision Tree \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.78      0.66      0.71        70\n",
            "           1       0.65      0.77      0.70        57\n",
            "\n",
            "    accuracy                           0.71       127\n",
            "   macro avg       0.71      0.71      0.71       127\n",
            "weighted avg       0.72      0.71      0.71       127\n",
            "\n",
            "ROC AUC:  0.6779448621553885\n",
            "Precision/Recall AUC:  0.48348721798777544\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Random Forest \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.61      0.91      0.73        70\n",
            "           1       0.73      0.28      0.41        57\n",
            "\n",
            "    accuracy                           0.63       127\n",
            "   macro avg       0.67      0.60      0.57       127\n",
            "weighted avg       0.66      0.63      0.58       127\n",
            "\n",
            "ROC AUC:  0.7512531328320803\n",
            "Precision/Recall AUC:  0.6416714348118839\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " AdaBoost \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      0.84      0.78        70\n",
            "           1       0.76      0.61      0.68        57\n",
            "\n",
            "    accuracy                           0.74       127\n",
            "   macro avg       0.74      0.73      0.73       127\n",
            "weighted avg       0.74      0.74      0.74       127\n",
            "\n",
            "ROC AUC:  0.7973684210526315\n",
            "Precision/Recall AUC:  0.7418503582816749\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Neural Net \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.87      0.81        70\n",
            "           1       0.81      0.67      0.73        57\n",
            "\n",
            "    accuracy                           0.78       127\n",
            "   macro avg       0.79      0.77      0.77       127\n",
            "weighted avg       0.78      0.78      0.78       127\n",
            "\n",
            "ROC AUC:  0.8842105263157896\n",
            "Precision/Recall AUC:  0.8477772947593165\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Naive Bayes \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.99      0.76        70\n",
            "           1       0.94      0.26      0.41        57\n",
            "\n",
            "    accuracy                           0.66       127\n",
            "   macro avg       0.78      0.62      0.59       127\n",
            "weighted avg       0.76      0.66      0.60       127\n",
            "\n",
            "ROC AUC:  0.8872180451127819\n",
            "Precision/Recall AUC:  0.8459698873124457\n",
            "\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given the above information the 2 best models indcated above are the tfidf vectorized logisitc regression and svm models which produced virtually identical ROC AUC and PR AUCs of 0.89 and 0.85 respectively. As has been the case in the past ROC AUC is generally considered to be the most optimal preformance metric as it is entriely threshold independant, creating a truer sense of the model's predictive abilites. Likewise this week we were introduced to another threshold independant metric, precision-recall AUC, which calcultes the area under the precison recall curve (ie a cuve plotting precsion and recall across all thresholds 0-1). As such a model with a comparatively higher ROC AUC and PR AUC will have greater performance than its peers. The same cannot be said about more rudimentaary metrics like preocison and recall which can be easily manipulated by ajusting the model's threshold. All told, the sklearn models performed to a much higher standard than their nltk counterparts with only the count and tfidf vectorized decision tree models demonstarting poor performance, only doing so in terms of PR AUC.   "
      ],
      "metadata": {
        "id": "UKPCwR-p2h3J"
      }
    }
  ]
}