{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "zOS8k8IHV4b1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd \n",
        "import numpy as np "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df = pd.read_csv('20 Restaurants.csv')"
      ],
      "metadata": {
        "id": "sUJolcdnWK4a"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "O1X29DJvXKzU",
        "outputId": "b84845bd-1da6-4e5f-f13b-ac19b7bbb50a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Unnamed: 0             Restaurant_Name    Cuisine  \\\n",
              "0            0              Mustang Harrys        Pub   \n",
              "1            0              Tracks Raw Bar        Pub   \n",
              "2            0                      Penn 6        Pub   \n",
              "3            0               Tripple Crown        Pub   \n",
              "4            0                    Antidote    Chinese   \n",
              "5            0                    Cheng Du    Chinese   \n",
              "6            0               Truly Sichuan    Chinese   \n",
              "7            0             Din Sum Dynasty    Chinese   \n",
              "8            0                  Joes Pizza      Pizza   \n",
              "9            0                    S Egidio      Pizza   \n",
              "10           0                Scarrs Pizza      Pizza   \n",
              "11           0        Village Sqaure Pizza      Pizza   \n",
              "12           0  Brooklyn Ice Cream Factory  Ice Cream   \n",
              "13           0     Max and Minas Ice Cream  Ice Cream   \n",
              "14           0            Surreal Creamery  Ice Cream   \n",
              "15           0                   Van Dykes  Ice Cream   \n",
              "16           0                   Jalapenos    Mexican   \n",
              "17           0                    Hacienda    Mexican   \n",
              "18           0               Rosa Mexicano    Mexican   \n",
              "19           0               Titos Buritos    Mexican   \n",
              "\n",
              "                                          Reivew_Text  \n",
              "0   didnt k ow expect glad stopped it happy hour g...  \n",
              "1   we watching show msg decided grab dinner nearb...  \n",
              "2   visiting town sat bar good menu bartender grea...  \n",
              "3   its ok bar located way madison square garden i...  \n",
              "4   really great vibe dish had crab tofu duck frie...  \n",
              "5   the food delicious we ordered pork fried rice ...  \n",
              "6   food tasty greasy flavorful we ordered crispy ...  \n",
              "7   we came multiple family ordered bunch small di...  \n",
              "8   delicious we went ungodly hour didnt wait  ser...  \n",
              "9   came girl friend bday still really awesome exp...  \n",
              "10  running around nyc shit girl wife wanted son i...  \n",
              "11  perfect late night snack hitting nyc bar night...  \n",
              "12  the service lovely the girl working counter sw...  \n",
              "13  cute small ice cream parlor variety flavor coo...  \n",
              "14  came way ny disappoint i would recommend try h...  \n",
              "15  they known serving biggest portion ice cream t...  \n",
              "16  we never know place existed ventured  it packe...  \n",
              "17  first time back since remodel place look much ...  \n",
              "18  having margarita national margarita day paired...  \n",
              "19  once titos didnt disappoint even though i orde...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c52e0592-1678-4144-8088-8504a4e8dfba\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Restaurant_Name</th>\n",
              "      <th>Cuisine</th>\n",
              "      <th>Reivew_Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Mustang Harrys</td>\n",
              "      <td>Pub</td>\n",
              "      <td>didnt k ow expect glad stopped it happy hour g...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>Tracks Raw Bar</td>\n",
              "      <td>Pub</td>\n",
              "      <td>we watching show msg decided grab dinner nearb...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>Penn 6</td>\n",
              "      <td>Pub</td>\n",
              "      <td>visiting town sat bar good menu bartender grea...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>Tripple Crown</td>\n",
              "      <td>Pub</td>\n",
              "      <td>its ok bar located way madison square garden i...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>Antidote</td>\n",
              "      <td>Chinese</td>\n",
              "      <td>really great vibe dish had crab tofu duck frie...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>Cheng Du</td>\n",
              "      <td>Chinese</td>\n",
              "      <td>the food delicious we ordered pork fried rice ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "      <td>Truly Sichuan</td>\n",
              "      <td>Chinese</td>\n",
              "      <td>food tasty greasy flavorful we ordered crispy ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0</td>\n",
              "      <td>Din Sum Dynasty</td>\n",
              "      <td>Chinese</td>\n",
              "      <td>we came multiple family ordered bunch small di...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "      <td>Joes Pizza</td>\n",
              "      <td>Pizza</td>\n",
              "      <td>delicious we went ungodly hour didnt wait  ser...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0</td>\n",
              "      <td>S Egidio</td>\n",
              "      <td>Pizza</td>\n",
              "      <td>came girl friend bday still really awesome exp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0</td>\n",
              "      <td>Scarrs Pizza</td>\n",
              "      <td>Pizza</td>\n",
              "      <td>running around nyc shit girl wife wanted son i...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0</td>\n",
              "      <td>Village Sqaure Pizza</td>\n",
              "      <td>Pizza</td>\n",
              "      <td>perfect late night snack hitting nyc bar night...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0</td>\n",
              "      <td>Brooklyn Ice Cream Factory</td>\n",
              "      <td>Ice Cream</td>\n",
              "      <td>the service lovely the girl working counter sw...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0</td>\n",
              "      <td>Max and Minas Ice Cream</td>\n",
              "      <td>Ice Cream</td>\n",
              "      <td>cute small ice cream parlor variety flavor coo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0</td>\n",
              "      <td>Surreal Creamery</td>\n",
              "      <td>Ice Cream</td>\n",
              "      <td>came way ny disappoint i would recommend try h...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0</td>\n",
              "      <td>Van Dykes</td>\n",
              "      <td>Ice Cream</td>\n",
              "      <td>they known serving biggest portion ice cream t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0</td>\n",
              "      <td>Jalapenos</td>\n",
              "      <td>Mexican</td>\n",
              "      <td>we never know place existed ventured  it packe...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0</td>\n",
              "      <td>Hacienda</td>\n",
              "      <td>Mexican</td>\n",
              "      <td>first time back since remodel place look much ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0</td>\n",
              "      <td>Rosa Mexicano</td>\n",
              "      <td>Mexican</td>\n",
              "      <td>having margarita national margarita day paired...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0</td>\n",
              "      <td>Titos Buritos</td>\n",
              "      <td>Mexican</td>\n",
              "      <td>once titos didnt disappoint even though i orde...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c52e0592-1678-4144-8088-8504a4e8dfba')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c52e0592-1678-4144-8088-8504a4e8dfba button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c52e0592-1678-4144-8088-8504a4e8dfba');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.drop(['Unnamed: 0'], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "Ei7w8BlhXO3N"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.head(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "s56pd70HXh3X",
        "outputId": "7c33f31b-1f64-49e5-d9c9-12030bb7d7ba"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Restaurant_Name Cuisine                                        Reivew_Text\n",
              "0  Mustang Harrys     Pub  didnt k ow expect glad stopped it happy hour g...\n",
              "1  Tracks Raw Bar     Pub  we watching show msg decided grab dinner nearb...\n",
              "2          Penn 6     Pub  visiting town sat bar good menu bartender grea...\n",
              "3   Tripple Crown     Pub  its ok bar located way madison square garden i..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-04268d81-bc7a-4972-af58-5242a210c9c0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Restaurant_Name</th>\n",
              "      <th>Cuisine</th>\n",
              "      <th>Reivew_Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Mustang Harrys</td>\n",
              "      <td>Pub</td>\n",
              "      <td>didnt k ow expect glad stopped it happy hour g...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Tracks Raw Bar</td>\n",
              "      <td>Pub</td>\n",
              "      <td>we watching show msg decided grab dinner nearb...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Penn 6</td>\n",
              "      <td>Pub</td>\n",
              "      <td>visiting town sat bar good menu bartender grea...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Tripple Crown</td>\n",
              "      <td>Pub</td>\n",
              "      <td>its ok bar located way madison square garden i...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04268d81-bc7a-4972-af58-5242a210c9c0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-04268d81-bc7a-4972-af58-5242a210c9c0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-04268d81-bc7a-4972-af58-5242a210c9c0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reviews_df.rename(columns = {'Reivew_Text': 'Review_Text'}, inplace = True)"
      ],
      "metadata": {
        "id": "klTSz50LbalD"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer"
      ],
      "metadata": {
        "id": "mV-IqYueZoR_"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reviews = reviews_df['Review_Text']"
      ],
      "metadata": {
        "id": "kX9ivl6UZroB"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "restaurant_names = list(reviews_df['Restaurant_Name'])"
      ],
      "metadata": {
        "id": "83atPtrtdv7K"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tfidf_vectorizer = TfidfVectorizer(max_df=0.8, max_features=5000,\n",
        "                                 min_df=0.2, stop_words='english',\n",
        "                                 use_idf=True, ngram_range=(1,3))"
      ],
      "metadata": {
        "id": "6jWdEPcibD5k"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tfidf_matrix = tfidf_vectorizer.fit_transform(reviews)"
      ],
      "metadata": {
        "id": "sNzis6wAcWOJ"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "terms = tfidf_vectorizer.get_feature_names_out()\n",
        "\n",
        "print(terms)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ieQl7GiqcqmD",
        "outputId": "4c9c872c-930a-4730-9757-992dcd0e37f1"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['10 min' '10 minute' '10 people' ... 'yummy food' 'zero' 'zone']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "dist = 1 - cosine_similarity(tfidf_matrix)"
      ],
      "metadata": {
        "id": "RzORUriRc0hK"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from scipy.cluster.hierarchy import ward, dendrogram\n",
        "\n",
        "linkage_matrix = ward(dist)\n",
        "fig, ax = plt.subplots(figsize=(15, 20))\n",
        "ax = dendrogram(linkage_matrix, orientation=\"right\", labels= restaurant_names);\n",
        "\n",
        "plt.tick_params(\\\n",
        "    axis= 'x',          \n",
        "    which='both',      \n",
        "    bottom='off',      \n",
        "    top='off',         \n",
        "    labelbottom='off')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('word_clusters.png', dpi=200)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Rgwph6rMc9u6",
        "outputId": "ff45cd07-0550-4df8-985d-0ef9bb779b5d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x1440 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import string\n",
        "import collections\n",
        "from nltk.corpus import stopwords\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from pprint import pprint"
      ],
      "metadata": {
        "id": "zHFrTeLHoOzV"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def cluster_texts(texts, clusters=4):\n",
        "    \"\"\" Transform texts to Tf-Idf coordinates and cluster texts using K-Means \"\"\"\n",
        "    vectorizer = TfidfVectorizer(max_df=0.8, max_features=5000,\n",
        "                                 min_df=0.2, stop_words='english',\n",
        "                                 use_idf=True, ngram_range=(1,3))\n",
        " \n",
        "    tfidf_model = vectorizer.fit_transform(texts)\n",
        "    km_model = KMeans(n_clusters=clusters)\n",
        "    km_model.fit(tfidf_model)\n",
        " \n",
        "    clustering = collections.defaultdict(list)\n",
        " \n",
        "    for idx, label in enumerate(km_model.labels_):\n",
        "        clustering[label].append(idx)\n",
        " \n",
        "    return clustering"
      ],
      "metadata": {
        "id": "Pd9hrmoNkubs"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clusters = cluster_texts(reviews, 5)\n",
        "pprint(dict(clusters))\n",
        "for c, ms in dict(clusters).items():\n",
        "    print('Cluster ', c, ':')\n",
        "    for m in ms:\n",
        "        print(restaurant_names[m])\n",
        "    \n",
        "    print('\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oHWWLiwXnu2B",
        "outputId": "4a4db54a-0e20-4a0f-8630-897158293070"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{0: [12, 13, 14, 15],\n",
            " 1: [16, 17, 18, 19],\n",
            " 2: [8, 9, 10, 11],\n",
            " 3: [4, 5, 6, 7],\n",
            " 4: [0, 1, 2, 3]}\n",
            "Cluster  4 :\n",
            "Mustang Harrys\n",
            "Tracks Raw Bar\n",
            "Penn 6\n",
            "Tripple Crown\n",
            "\n",
            "\n",
            "Cluster  3 :\n",
            "Antidote\n",
            "Cheng Du\n",
            "Truly Sichuan\n",
            "Din Sum Dynasty\n",
            "\n",
            "\n",
            "Cluster  2 :\n",
            "Joes Pizza\n",
            "S Egidio\n",
            "Scarrs Pizza\n",
            "Village Sqaure Pizza\n",
            "\n",
            "\n",
            "Cluster  0 :\n",
            "Brooklyn Ice Cream Factory\n",
            "Max and Minas Ice Cream\n",
            "Surreal Creamery\n",
            "Van Dykes\n",
            "\n",
            "\n",
            "Cluster  1 :\n",
            "Jalapenos\n",
            "Hacienda\n",
            "Rosa Mexicano\n",
            "Titos Buritos\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The results of the clustering analysis were exteremly pleasing and easy to interpret. As demonstrated by the dendragram and k-means output above, all 5 cusisne types are represented by individual clusters consisting 4 restaurants each. In this sense no restuarant was placed within an 'incorrect' cluster, (ie mexican grouped with pizza, etc). Per the dendrogram it would also appear that the two most similar cusine types are pubs and Mexican restuarants . The link between the pair makes sense on the surface given they often focus on serving alcohol as well as food. Based on the dendrogram it would also seem as though Chinese restaurants held more similarities with Pubs/Mexican restaurants than Ice Cream and Pizza parlors, both of which were largely independant from the other 3 cuisine types. "
      ],
      "metadata": {
        "id": "3HzaejpPrHOt"
      }
    }
  ]
}